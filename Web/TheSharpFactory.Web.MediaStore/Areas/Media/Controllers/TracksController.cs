using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TheSharpFactory.Entity.MainDb.Media;
using TheSharpFactory.Query;
using TheSharpFactory.Repository.Container.Interfaces;

namespace TheSharpFactory.Web.Areas.Media.Controllers
{
    [Area("Media")]
    public class TracksController : Controller
    {
        //reference to the repository generated by The Sharp Factory
        private readonly IRepositoryContainer _repository;

        public TracksController(IRepositoryContainer repository)
        {
            _repository = repository;
        }

        // GET: TracksController
        public ActionResult Index(int? albumId, int? playlistId)
        {
            if (albumId == null && playlistId == null)
            {
                return NotFound();
            }
            IList<Track> model = null;

            if (albumId != null)
            {
                var queryAlbum = new Query<TrackProperty, TrackNavProperty>()
                    .BeginNavProps()
                        .Append(TrackNavProperty.Genre)
                    .EndNavProps()
                    .BeginPredicate()
                        .Where(TrackProperty.AlbumId).Equals(albumId)
                    .EndPredicate();
                model = _repository.MainDb.Media.Track.ToList(queryAlbum);

            }
            if (playlistId != null)
            {
                var queryPlaylist = new Query<PlaylistTrackProperty, PlaylistTrackNavProperty>()
                    .BeginNavProps()
                        .Append(PlaylistTrackNavProperty.Track)/*.Then(TrackNavProperty.Genre)*/
                    .EndNavProps()
                    .BeginPredicate()
                        .Where(PlaylistTrackProperty.PlaylistId).Equals(playlistId)
                    .EndPredicate();
                var result = _repository.MainDb.Media.PlaylistTrack.ToList(queryPlaylist);
                if (result != null)
                {
                    model = result.Select(x => x.Track).ToList();
                }     
            }

            return View(model);
        }

        // GET: TracksController/Details/5
        public ActionResult Details(int id)
        {
            var model = _repository.MainDb.Media.Track.ByPK(id);
            return View(model);
        }

        // GET: TracksController/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: TracksController/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Track track)
        {
            _repository.MainDb.Media.Track.Create(track);

            return RedirectToAction(nameof(Index));
        }

        // GET: TracksController/Edit/5
        public ActionResult Edit(int id)
        {
            var model = _repository.MainDb.Media.Track.ByPK(id);           
            
            return View();
        }

        // POST: TracksController/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Track track)
        {
            _repository.MainDb.Media.Track.Update(track);

            return RedirectToAction(nameof(Index));
        }

        // GET: TracksController/Delete/5
        public ActionResult Delete(int id)
        {
            var model = _repository.MainDb.Media.Track.ByPK(id);
            return View();
        }

        // POST: TracksController/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(Track track)
        {
            _repository.MainDb.Media.Track.Delete(track);

            return RedirectToAction(nameof(Index));
        }
    }
}
