using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using TheSharpFactory.Entity.MainDb.Media;
using TheSharpFactory.Query;
using TheSharpFactory.Repository.Container.Interfaces;

namespace TheSharpFactory.Web.Areas.Media.Controllers
{
    [Area("Media")]
    public class PlaylistsController : Controller
    {
        //reference to the repository generated by The Sharp Factory
        private readonly IRepositoryContainer _repository;

        public PlaylistsController(IRepositoryContainer repository)
        {
            _repository = repository;
        }

        // GET: PlaylistsController
        public ActionResult Index()
        {
            var model = _repository.MainDb.Media.Playlist.ToList();

            return View(model);
        }

        [HttpPost]
        public ActionResult GetList()
        {
            //Server Side Parameter
            var form = HttpContext.Request.Form;
            int start = Convert.ToInt32(form["start"]);
            int length = Convert.ToInt32(form["length"]);
            string searchValue = form["search[value]"];
            string sortColumnName = form["columns[" + form["order[0][column]"] + "][name]"];
            string sortDirection = form["order[0][dir]"];

            var query = new Query<PlaylistProperty>()
                .BeginPredicate()
                    .Where(PlaylistProperty.Name).Like(searchValue)
                .EndPredicate()
                .BeginPagination()
                    .PageNumber(start)
                    .PageSize(length)
                    .ReturnTotalCount(true)
                .EndPagination()
                .BeginSorting()
                    .OrderBy(PlaylistProperty.Name)
                .EndSorting();

            var list = _repository.MainDb.Media.Playlist.ToList(query);

            return Json(new { data = list, recordsTotal = query.RecordCount, recordsFiltered = query.RecordCount}, new JsonSerializerSettings());
        }

        // GET: PlaylistsController/Details/5
        public ActionResult Details(int id)
        {
            var model = _repository.MainDb.Media.Playlist.ByPK(id);

            return View(model);
        }

        // GET: PlaylistsController/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: PlaylistsController/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Playlist playlist)
        {
            _repository.MainDb.Media.Playlist.Create(playlist);

            return RedirectToAction(nameof(Index));
        }

        // GET: PlaylistsController/Edit/5
        public ActionResult Edit(int id)
        {
            var model = _repository.MainDb.Media.Playlist.ByPK(id);

            return View(model);
        }

        // POST: PlaylistsController/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Playlist playlist)
        {
            _repository.MainDb.Media.Playlist.Update(playlist);

            var model = _repository.MainDb.Media.Playlist.ByPK(playlist.PlaylistId);

            //return View(model);
            return RedirectToAction(nameof(Index));
        }

        // GET: PlaylistsController/Delete/5
        public ActionResult Delete(int id)
        {
            var model = _repository.MainDb.Media.Playlist.ByPK(id);

            return View(model);
        }

        // POST: PlaylistsController/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(Playlist playlist)
        {
            _repository.MainDb.Media.Playlist.Delete(playlist);

            return RedirectToAction(nameof(Index));
        }
    }
}
